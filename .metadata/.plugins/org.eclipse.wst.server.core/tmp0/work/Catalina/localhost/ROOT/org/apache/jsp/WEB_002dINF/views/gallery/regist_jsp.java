/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-02-16 03:34:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.gallery;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class regist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>게시판 글등록</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write(".boxStyle{\r\n");
      out.write("	width:70px;\r\n");
      out.write("	height:85px;\r\n");
      out.write("	border:2px solid #ccc;\r\n");
      out.write("	display:inline-block;  /*lnline : 다른 요소와 공존, block: 크기 설정*/\r\n");
      out.write("	margin:5px;\r\n");
      out.write("}\r\n");
      out.write(".boxStyle img{\r\n");
      out.write("	width:70px;\r\n");
      out.write("	height:55px;\r\n");
      out.write("}\r\n");
      out.write(".boxStyle div{\r\n");
      out.write("	text-align:right;\r\n");
      out.write("	margin-right:5px;\r\n");
      out.write("	font-weight:bold;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<!-- Latest compiled and minified CSS -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css\">\r\n");
      out.write("<!-- jQuery library -->\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js\"></script>\r\n");
      out.write("<!-- Popper JS -->\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\"></script>\r\n");
      out.write("<!-- Latest compiled JavaScript -->\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("<!-- View.js (https://v2.vuejs.org/v2/guide/#Getting-Started)-->\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	let app1;\r\n");
      out.write("	let key=0;  //유저가 프로그램을 사용하는 동안 그 값을 계속 증가시켜야 유효성이 확보됨 (데이터베이스 연동 안했을 경우)\r\n");
      out.write("	\r\n");
      out.write("	//사용자 정의 UI 컴포넌트 등록하기\r\n");
      out.write("	//등록한 이후엔 마치 태그처럼 사용가능\r\n");
      out.write("	const imagebox={\r\n");
      out.write("		template:`\r\n");
      out.write("			<div class=\"boxStyle\">\r\n");
      out.write("				<div @click=\"delImg(p_idx)\"><a href=\"#\">X</a></div>\r\n");
      out.write("				<img :src=\"p_src\">  \r\n");
      out.write("			</div>	\r\n");
      out.write("		`,\r\n");
      out.write("		/*이 컴포넌트를 태그로 호출하는 자가 넘긴 속성을 받으려면 props로 받음*/\r\n");
      out.write("		props:['src', 'idx'],\r\n");
      out.write("		data(){  //이미지 박스 하나당 하나의 정보를 가짐\r\n");
      out.write("			return {\r\n");
      out.write("				/*	tamplate 변수명 : 해당 속성\r\n");
      out.write("					props의 용도 : 외부에서 전달된 속성값을 보관하기 위한 변수\r\n");
      out.write("					p_src의 용도 : 내부 템플릿에서 접근하기 위한 변수*/\r\n");
      out.write("				p_src:this.src,\r\n");
      out.write("				p_idx:this.idx\r\n");
      out.write("			};\r\n");
      out.write("		},\r\n");
      out.write("		methods:{\r\n");
      out.write("            delImg:function(idx){\r\n");
      out.write("                //alert(\"삭제할 이미지 고유 idx값은? \"+idx);\r\n");
      out.write("\r\n");
      out.write("                //imageList안의 모든 json이 모유한 idx값을 비교하여 일치하면 삭제하기\r\n");
      out.write("                for(let i=0; i<app1.imgList.length; i++){\r\n");
      out.write("                    let json=app1.imgList[i];\r\n");
      out.write("\r\n");
      out.write("                    if(json.key==idx){\r\n");
      out.write("                        app1.imgList.splice(i,1); //지울 요소와 갯수\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("	};\r\n");
      out.write("	\r\n");
      out.write("	function init(){\r\n");
      out.write("		app1=new Vue({\r\n");
      out.write("			el:\"#app1\",\r\n");
      out.write("			components:{\r\n");
      out.write("				imagebox\r\n");
      out.write("			},\r\n");
      out.write("			data:{\r\n");
      out.write("				count:3,\r\n");
      out.write("				imgList:[]  /*유저가 선택한 파일에 대한 정보, src, name...(src보다 더많은 정보가 들어있음)*/\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	//사용자가 선택한 이미지가 app1.imgList에 들어있는지 여부 판단\r\n");
      out.write("	function checkDuplicate(filename){\r\n");
      out.write("		let count=0;\r\n");
      out.write("		for(let i=0;i<app1.imgList.length;i++){\r\n");
      out.write("			let json=app1.imgList[i];\r\n");
      out.write("			\r\n");
      out.write("			if(json.name==filename){  //동일한 파일 이름이 발견된다면\r\n");
      out.write("				count++;\r\n");
      out.write("				break;\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		return count;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	//이미지 미리보기 구현\r\n");
      out.write("	function preview(files){\r\n");
      out.write("		console.log(\"files는 \", files);\r\n");
      out.write("		\r\n");
      out.write("		//배열 안에 들어있는 파일정보를 하나씩 읽어들여 화면에 출력\r\n");
      out.write("		for(let i=0;i<files.length;i++){\r\n");
      out.write("			//배열에 들어있는 파일 하나씩 꺼내기\r\n");
      out.write("			let file=files[i];  //대상파일에 넣어주기 위해 꺼냄 \r\n");
      out.write("			\r\n");
      out.write("			//app1.imgList 배열에 존재하지 않을 경우 (중복된 이미지가 없을 경우)\r\n");
      out.write("			//1보다 작다면 발견된게 없다는 뜻\r\n");
      out.write("			if(checkDuplicate(file.name) < 1){  \r\n");
      out.write("				let reader=new FileReader();  //파일 입력스트림 생성\r\n");
      out.write("				reader.onload=(e)=>{\r\n");
      out.write("					//console.log(\"이미지 읽기 완료\", e.target.result);\r\n");
      out.write("					console.log(\"file 정보는 \", file);\r\n");
      out.write("					//console.log(\"src 정보는 \", e.target.result);  //바이너리 정보\r\n");
      out.write("					\r\n");
      out.write("					//app1.src.push(e.target.result);\r\n");
      out.write("					//console.log(\"app1.src[0]\", app1.src[0]);\r\n");
      out.write("					\r\n");
      out.write("					//이미지 정보를 낱개로 관리하지 말고, 하나의 json으로 몰아서 마치 DTO 처럼 관리\r\n");
      out.write("					key++;  //key 값 먼저 증가시킴 , 1부터 시작됨\r\n");
      out.write("					let json=[];  //empty json\r\n");
      out.write("					\r\n");
      out.write("					//고유값 넣기, 추후 이미지 삭제 시 고유값 사용하기 위해\r\n");
      out.write("					json['key']=key;  //삭제할 때 사용\r\n");
      out.write("					json['name']=file.name;  //중복 이미지 체크 시 사용\r\n");
      out.write("					json['binary']=e.target.result;  //추후 img.src에 대입할 예정\r\n");
      out.write("					json['file']=file;  //파일 자체에 대한 모든 정보 (전송할 때 사용)\r\n");
      out.write("					\r\n");
      out.write("					console.log(\"key 값은\", key);\r\n");
      out.write("					//console.log(\"i 값은\", i);  \r\n");
      out.write("					\r\n");
      out.write("					//app1.imgList.push(file);  //위에 코드 대신에 사용 (file자체)\r\n");
      out.write("					app1.imgList.push(json);  //모든 정보가 다 들어있음\r\n");
      out.write("					\r\n");
      out.write("				}\r\n");
      out.write("				reader.readAsDataURL(file);  //(대상파일)\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("		//갤러리 등록\r\n");
      out.write("		function regist(){\r\n");
      out.write("		//기존 html의 폼을 이용하여 전송할 경우, 제일 마지막에 일으킨 이벤트에 의해 \r\n");
      out.write("		//등록된 이미지들만 전송하므로, 누적된 이미지는 전송할 수 없다\r\n");
      out.write("		//해결책)  form을 대체하는  formData객체를 이용하여 개발자가 주도하여 \r\n");
      out.write("		//폼을 구성하여 전송하면 됨 html5  FormData + JQuery Ajax 사용이 쉽다\r\n");
      out.write("		\r\n");
      out.write("		let formData = new FormData();//비어 잇는 폼을 하나 생성\r\n");
      out.write("		\r\n");
      out.write("		//개발자가 직접 파라미터를 구성할 수 있다\r\n");
      out.write("		formData.append(\"title\", $(\"input[name='title']\").val());\r\n");
      out.write("		formData.append(\"writer\", $(\"input[name='writer']\").val());\r\n");
      out.write("		formData.append(\"content\", $(\"textarea[name='content']\").val());\r\n");
      out.write("		\r\n");
      out.write("		//파일 파라미터 채우기 (2개이상임)\r\n");
      out.write("		for(let i=0; i<app1.imgList.length;i++){\r\n");
      out.write("			let file = app1.imgList[i].file; //전송할 파일 끄집어내기 \r\n");
      out.write("			formData.append(\"photo\", file);   //(변수명, file)\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		//ajax 비동기 전송\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url:\"/gallery/regist\", \r\n");
      out.write("			type:\"post\",\r\n");
      out.write("			processData:false,  //title=test&writer=ddd 문자열화 방지\r\n");
      out.write("			contentType:false, //application/x-www 방지 ...\r\n");
      out.write("			data:formData, \r\n");
      out.write("			success:function(result, status, xhr){\r\n");
      out.write("				alert(result);\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	$(function(){\r\n");
      out.write("		init();\r\n");
      out.write("		\r\n");
      out.write("		//이미지를 선택하면 \r\n");
      out.write("		$(\"input[name='photo']\").change(function(){\r\n");
      out.write("			//files 배열은 readOnly로 조작이 불가능함\r\n");
      out.write("			preview(this.files);\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		//등록버튼 \r\n");
      out.write("		$(\"#bt_regist\").click(function(){\r\n");
      out.write("			regist();\r\n");
      out.write("		});\r\n");
      out.write("	});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"container mt-3\" id=\"app1\">\r\n");
      out.write("		<div class=\"row\">\r\n");
      out.write("			<div class=\"col\">\r\n");
      out.write("				<form id=\"form1\">\r\n");
      out.write("					<div class=\"form-group\">\r\n");
      out.write("   						<input type=\"text\" class=\"form-control\" placeholder=\"Enter title\" name=\"title\">\r\n");
      out.write(" 					</div>\r\n");
      out.write(" 					<div class=\"form-group\">\r\n");
      out.write("   						<input type=\"text\" class=\"form-control\" placeholder=\"Enter writer\" name=\"writer\">\r\n");
      out.write(" 					</div>\r\n");
      out.write(" 					<div class=\"form-group\">\r\n");
      out.write("   						<textarea type=\"text\" class=\"form-control\" placeholder=\"Enter content\" name=\"content\"></textarea>\r\n");
      out.write(" 					</div>\r\n");
      out.write(" 					<div class=\"form-group\">\r\n");
      out.write("   						<input type=\"file\" class=\"form-control\" name=\"photo\" multiple=\"multiple\">\r\n");
      out.write(" 					</div>\r\n");
      out.write(" 					<div class=\"form-group\" id=\"previewArea\">\r\n");
      out.write("   						<!-- template : 반복문에 관여하지만 디자인에는 관여하지 않음 \r\n");
      out.write("   								key 값은 내부적으로 사용하므로 key 값과 동일한 값을 추가해줌-->\r\n");
      out.write("   						<template v-for=\"json in imgList\">\r\n");
      out.write("   							<imagebox :key=\"json.key\" :src=\"json.binary\" :idx=\"json.key\" />\r\n");
      out.write("   						</template>\r\n");
      out.write(" 					</div>\r\n");
      out.write(" 					<div class=\"form-group\">\r\n");
      out.write("   						<button type=\"button\" class=\"btn btn-outline-success\" id=\"bt_regist\">등록</button>\r\n");
      out.write("   						<button type=\"button\" class=\"btn btn-outline-success\" id=\"bt_list\">목록</button>\r\n");
      out.write(" 					</div>\r\n");
      out.write("				</form>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

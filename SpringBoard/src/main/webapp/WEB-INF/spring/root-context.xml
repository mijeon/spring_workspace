<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:jee="http://www.springframework.org/schema/jee"
   xmlns:p="http://www.springframework.org/schema/p"
   xmlns:aop="http://www.springframework.org/schema/aop"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:tx="http://www.springframework.org/schema/tx"
   
   xsi:schemaLocation="
   							http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
                           	http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                           	http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                           	http://www.springframework.org/schema/jee https://www.springframework.org/schema/jee/spring-jee.xsd
                          	http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 	7) 스프링의 트랜잭션 등의 도움을 받기 위해서는, 스프링이 db 커넥션을 취득해야 함
			따라서 스프링에서 JNDI를 검색하여 커넥션을 보유하자 -->
	<!-- DB 연동 기술 중 Mybatis Spirng 사용을 위한 설정 -->
	<jee:jndi-lookup 
		id="dataSource"
		jndi-name="jdbc/mysql"
		resource-ref="true"/>
	
	<!-- 	기술에 따른 트랜잭션 매니저를 빈으로 등록
			JDBC - DataSourceTransactionManager
			Mybatis - DataSourceTransactionManager
			Hibernate - HibernateTransactionManager -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" 
		p:dataSource-ref="dataSource"/>
	
	<!-- 	SqlSession을 얻기 위한 SqlSessionFactoryBean 등록 
			원래 Mybatis가 취득했던 커넥션을 스프링이 주도하기 때문에, dataSource-ref로 db정보를 SqlSessionFactoryBean에 넣어주자 -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean" 
		p:dataSource-ref="dataSource"
		p:configLocation="classPath:com/edu/springboard/mybatis/config.xml"/>	
		
		<!-- SqlSession 추가 -->
		<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
			<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"/>
		</bean>
		
		<!-- DB 연동 기술 중 Spring JDBC 사용을 위한 설정 -->
		<!-- oracle을 인식하는 jdbcTemplate -->
		<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
			p:dataSource-ref="dataSource" />
		
		<context:component-scan base-package="com.edu.springboard.model"></context:component-scan>
		
		<!-- 	트랜잭션을 적용하는 방법은 크게 2가지
				1) xml에서 적용하는 방식 - 선언적 방식 (일괄 적용 시 유리)
				2) java 코드에서 어노테이션을 이용하는 방식 (서비스 마다 넣어야 하기 때문에 개별적 적용 시 유리) -->
		<aop:config>
			<!-- 트랜잭션을 어떠한 메서드들에 적용할지 패턴 명시 : 서비스가 트랜잭션의  대상이 됨 -->
			<aop:pointcut expression="execution(public * com.edu.springboard.model..*Impl.*(..))" id="txcut"/>
			<aop:advisor advice-ref="txAdvice" pointcut-ref="txcut"/>
		</aop:config>
		
		<!-- 현재 어플리케이션이 사용중인 db 연동기술 적용 -->
		<tx:advice id="txAdvice" transaction-manager="transactionManager">
			<tx:attributes>
				<tx:method name="update" propagation="REQUIRED"/>
			</tx:attributes>
		</tx:advice>
</beans>
